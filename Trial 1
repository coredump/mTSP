from __future__ import print_function 
import math 
from ortools.constraint_solver import pywrapcp 
from ortools.constraint_solver import routing_enums_pb2 
def distance(x1, y1, x2, y2): 
    # Manhattan distance 
    dist = abs(x1 - x2) + abs(y1 - y2) 
 
    return dist 
class CreateDistanceCallback(object): 
  """Create callback to calculate distances between points.""" 
 
  def __init__(self, locations): 
    """Initialize distance array.""" 
    size = len(locations) 
    self.matrix = {} 
 
    for from_node in range(size): 
      self.matrix[from_node] = {} 
      for to_node in range(size): 
        x1 = locations[from_node][0] 
        y1 = locations[from_node][1] 
        x2 = locations[to_node][0] 
        y2 = locations[to_node][1] 
        self.matrix[from_node][to_node] = distance(x1, y1, x2, y2) 
 
  def Distance(self, from_node, to_node): 
    return int(self.matrix[from_node][to_node]) 
 
# Demand callback 
class CreateDemandCallback(object): 
  """Create callback to get demands at each location.""" 
 
  def __init__(self, demands): 
    self.matrix = demands 
 
  def Demand(self, from_node, to_node): 
    return self.matrix[from_node] 
 
def main(): 
  # Create the data. 
  data = create_data_array() 
  locations = data[0] 
  demands = data[1] 
  num_locations = len(locations) 
  depot = 0    # The depot is the start and end point of each route. 
  num_routes = 3 
 
  # Create routing model. 
  if num_locations > 0: 
    routing = pywrapcp.RoutingModel(num_locations, num_routes, depot) 
    search_parameters = pywrapcp.RoutingModel.DefaultSearchParameters() 
    # Callback to the distance function. 
 
    dist_between_locations = CreateDistanceCallback(locations) 
    dist_callback = dist_between_locations.Distance 
    routing.SetArcCostEvaluatorOfAllVehicles(dist_callback) 
 
    # Put a callback to the demands. 
    demands_at_locations = CreateDemandCallback(demands) 
    demands_callback = demands_at_locations.Demand 
 
    # Add a dimension for demand. 
    slack_max = 0 
    vehicle_capacity = 100 
    fix_start_cumul_to_zero = True 
    demand = "Demand" 
    routing.AddDimension(demands_callback, slack_max, vehicle_capacity, 
                         fix_start_cumul_to_zero, demand) 
    # The following line is only necessary if you have added search parameters different from the 
    # default parameters. If you omit this line, the search uses default search parameters. 
    routing.CloseModelWithParameters(search_parameters) 
    # Set initial routes. 
    initial_routes = [[1,4], [2,3]] 
 
    initial_assignment = routing.ReadAssignmentFromRoutes(initial_routes, True) 
    print("Initial routes: ", initial_routes, "\n") 
    print("Total distance: " + str(initial_assignment.ObjectiveValue()) + "\n") 
    final_assignment = routing.SolveFromAssignmentWithParameters(initial_assignment, search_parameters) 
    if final_assignment: 
      final_routes = get_routes_array(final_assignment, num_routes, routing) 
      print("Final routes: ", final_routes, "\n") 
      print("Total distance: " + str(final_assignment.ObjectiveValue()) + "\n") 
    else: 
      print('No solution found.') 
  else: 
    print('Specify an instance greater than 0.') 
 
def get_routes_array(assignment, num_routes, routing): 
  routes = [] 
  for vehicle_nbr in range(num_routes): 
    index = routing.Start(vehicle_nbr) 
    route = [] 
 
    while not routing.IsEnd(index): 
      index = assignment.Value(routing.NextVar(index)) 
      node_index = routing.IndexToNode(index) 
      route.append(node_index) 
    # Remove last node (the depot). 
    route = route[:-1] 
    routes.append(route) 
  return routes 
 
def create_data_array(): 
 
  locations = [[39.52021,-87.1398],[39.43061,-87.3317],[40.52112,-87.3758],[40.12976,-86.3983],[39.74842,-86.2650]] 
 
  demands = [0, 19, 21, 6, 19, 7] 
  data = [locations, demands] 
  return data 
 
if __name__ == '__main__': 
  main()
